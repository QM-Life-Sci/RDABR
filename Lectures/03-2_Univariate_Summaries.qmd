---
title: "Unit 3: Univariate Summaries"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    standalone: true
    slide-number: true
    show-slide-number: print
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)

theme_set(theme_classic(base_size = 20))
```


# Housekeeping {background-color="#40666e"}

- Three-week check in (link on Canvas)
- PS 2 due sometime soon (Rmd and HTML if you can)
- Let's look at the slides
- Start PS 3 today
- Any other questions?


# Distributions {background-color="#40666e"}


## Distributions

- All observations can be thought of as coming from a population that can be represented as a distribution
- Flip a coin 6 times and get HHTTHT: one observation in a distribution of possible outcomes (THTHTH, HHHTTT, etc.)
- Catch a rodent in my swimming pool and test its endurance: that data point is one value in the larger distribution of all endurance measures for all rodents


## Distributions most commonly encountered

1. Frequency distribution
    - Shows the number of times each measurement occurs in a sample (possibly "binned")
    - Counts of Heads, Water, Taller SNPs, etc.
1. Probability distribution:
    - A probability distribution shows the probability that measurement occurs in a sample.


## Probability distributions

Mathematical function for *probabilities* of *possible outcomes*

- *Probabilities*: between 0 and 1
- *Possible outcomes*: real number, integer, binomial (0/1), etc.

Normal distribution ($x$, $\mu$, $\sigma$):

$$
Pr\left[x\right] = \frac{1}{\sqrt{2\pi\sigma^{2}}}e^{\frac{-\left(x-\mu\right)^{2}}{2\sigma^{2}}}
$$


## Normal distribution

$$
Pr\left[x\right] = \frac{1}{\sqrt{2\pi\sigma^{2}}}e^{\frac{-\left(x-\mu\right)^{2}}{2\sigma^{2}}}
$$

```{r}
#| echo: true

Normal <- function(x, mu, sigma) {
  (1 / (sqrt(2 * pi * sigma^2))) * exp((-1 * (x - mu)^2) / (2 * sigma^2))
}

Normal(x = 1, mu = 0, sigma = 1)
```

. . .

R has built-in functions for probability distributions ("densities").

`dnorm()` is the normal distribution probability density:

```{r}
#| echo: true

dnorm(x = 1, mean = 0, sd = 1)
```


## Normal distribution

Calculate the probability across the range $-3$ to $3$ for $\mu = 0$ and $\sigma = 1$:

```{r}
#| echo: true
Std_Normal <- tibble(x = seq(-3, 3, length.out = 100),
                     Probability = dnorm(x, mean = 0, sd = 1))
```

Plot the probability as a line:

```{r}
#| echo: true
#| eval: false

ggplot() +
  geom_line(data = Std_Normal,
            aes(x, Probability),
            color = "salmon",
            linewidth = 1.5) +
  geom_point(aes(x = 1, y = dnorm(x = 1, mean = 0, sd = 1)),
             size = 4,
             color = "darkgreen") +
  scale_y_continuous(limits = c(0, 0.4), breaks = seq(0, 0.4, by = 0.05)) +
  scale_x_continuous(breaks = seq(-3, 3, by = 0.5))
```


## Normal distribution

```{r}
#| echo: false

ggplot() +
  geom_line(data = Std_Normal,
            aes(x, Probability),
            color = "salmon",
            linewidth = 1.5) +
  geom_point(aes(x = 1, y = dnorm(x = 1, mean = 0, sd = 1)),
             size = 5,
             color = "darkgreen") +
  scale_y_continuous(limits = c(0, 0.4), breaks = seq(0, 0.4, by = 0.05)) +
  scale_x_continuous(breaks = seq(-3, 3, by = 0.5))
```

Area under the curve = 1 integrating $Pr[x]$ for $-\infty < x < \infty$


## Test out `dnorm()`

- Pick a value for $x$
- Choose `mean` and `sd` (not 0 and 1)

```{r}
#| echo: true

rnorm(10, mean = 2, sd = 5)
```

See what probabilities you find.

What sum do you predict:

```{r}
#| echo: true
#| eval: false

x <- seq(-100, 100)
sum(dnorm(x, mean = 0, sd = 1))
```


## Many distributions

![](images/distributions.png){fig-align="center" width="80%"}


# Exploring Variation {background-color="#40666e"}

:::{.center}
Normal distribution
:::


## Describing a normal distribution

Central tendency

- Mean
- Median
- Mode (most common value)

Spread

- Standard deviation
- Interquartile range


## Sample (arithmetic) mean

$$\bar{x} = \frac{1}{n}~\sum^n_{i=1}x_i = \frac{\sum^n_{i=1}x_i}{n}$$

. . .

"From $i = 1$ to $i = n$, sum ($\Sigma$) each observation ($x_i$) and divide the sum by $n$, where $n$ is the count of observations."

:::{.callout-note}
"Mean" is preferred to "average". Most of the time they are synonymous. 
:::

## Median

- The central observations of a sample
- The 50th percentile
- The 0.50 quantile).
- If $n$ is even, then the median is the mean of the two middle observations.

```{r}
#| echo: true

1:10
median(1:10)
quantile(1:10, prob = 0.5)
```


## Mean vs. Median

Number of lateral plates (plates) in threespine sticklebacks (*Gasterosteus aculeatus*) with three different *Ectodysplasin* genotypes (*mm*, *Mm*, and *MM*).

![](https://i.imgur.com/Xr68AKa.jpg){fig-align="center"}


## Mean vs. Median

```{r}
SticklebackPlates <- read_csv("https://raw.githubusercontent.com/QM-Life-Sci/RDABR/refs/heads/main/data/Stickleback_Plates.csv",
                              show_col_types = FALSE)
```

```{r}
knitr::kable(SticklebackPlates)
```


## Mean vs. Median

```{r}
ggplot(SticklebackPlates, aes(x = plates)) +
  geom_histogram(bins = 30, fill = "gray75") +
  facet_grid(genotype ~ .) +
  labs(x = "Number of Lateral Body Plates", y = "Count") +
  theme(strip.text = element_text(face = "italic"))
```


## Mean vs. Median

```{r}
#| echo: true

SticklebackPlates |> 
  group_by(genotype) |> 
  summarize(mean_plate = mean(plates),
            median_plate = median(plates))
```

How do the mean and median compare?


## Mean is sensitive to extreme values

```{r}
M <- SticklebackPlates |> 
  group_by(genotype) |> 
  summarize(Mean = mean(plates),
            Median = median(plates),
            .groups = "drop") |> 
  gather(Value, x, -genotype)

ggplot(SticklebackPlates, aes(x = plates, group = genotype)) +
  geom_histogram(bins = 30, fill = "gray75") +
  geom_vline(data = M, aes(xintercept = x, color = Value),
             linewidth = 2) +
  scale_color_manual(values = c("firebrick4", "navyblue")) +
  facet_grid(genotype ~ .) +
  labs(x = "Number of Lateral Body Plates", y = "Count") +
  theme(strip.text = element_text(face = "italic"))
```


# Questions {background-color="#f8c471"}

# Measures of Spread {background-color="#40666e"}

1. Standard deviation (and variance)
2. Interquartile range


## Standard deviation

$$\sigma = \sqrt{\frac{\sum^{n}_{i = 1}\left( x_i - \bar{x} \right)^2}{n}}$$

- What is $\bar{x}$?
- What does $\left( x_i - \bar{x} \right)^2$ represent? Why squared? What does this imply for standard deviations?
- What is the function of $n$?
- What is the function of the square root in the equation?


## Standard deviation: Rules of thumb

- ~68% of points between -1 sd and +1 sd (±1 sd)
- ~95% of points between -2 sd and +2 sd (±2 sd)
- ~99.7% of points between -3 sd and +3 sd (±3 sd)

```{r}
#| fig-align: center

ggplot() +
  geom_line(data = Std_Normal,
            aes(x, Probability),
            color = "gray75",
            linewidth = 1) +
  geom_segment(aes(x = c(-1, 1),
                   xend = c(-1, 1),
                   y = 0,
                   yend = dnorm(x = c(-1, 1))),
               color = "orange", linewidth = 1.5) +
  geom_segment(aes(x = c(-2, 2),
                   xend = c(-2, 2),
                   y = 0,
                   yend = dnorm(x = c(-2, 2))),
               color = "darkgreen", linewidth = 1.5) +
  geom_segment(aes(x = c(-3, 3),
                   xend = c(-3, 3),
                   y = 0,
                   yend = dnorm(x = c(-3, 3))),
               color = "navy", linewidth = 1.5) +
  scale_y_continuous(limits = c(0, 0.4), breaks = seq(0, 0.4, by = 0.05)) +
  scale_x_continuous(breaks = seq(-3, 3, by = 0.5))
```


## Variance

$$\sigma^2 = \frac{\sum^{n}_{i = 1}\left( x_i - \bar{x} \right)^2}{n}$$

- Some equations will use the variance (e.g., normal distribution probability density)
- Most people think in standard deviations
    - Same units as $x$


## Interquartile range (IQR)

- Remember that the median is the 0.5 quantile (and 50th percentile)
- IQR is the range between the 0.25 and 0.75 quantiles ("quartiles")

```{r}
#| echo: true

quantile(iris$Sepal.Length, probs = 0.75) - 
  quantile(iris$Sepal.Length, probs = 0.25)

IQR(iris$Sepal.Length)
```

Call `summary()` on a vector:

```{r}
#| echo: true

summary(iris$Sepal.Length)
```


## Why does all this matter?

- Your confidence in an estimate depends on the spread of the observed data
- Coming soon:
    - Relationships between variables
    - Differences in means between groups

All depend on the means and spread of the data


# Sampling from Distributions {background-color="#40666e"}

[Kingfisher fish-sampling demo](https://www.zoology.ubc.ca/~whitlock/Kingfisher/SamplingNormal.htm){target="_blank"}


## Means of samples

Law of Large Numbers

- The mean of repeated samples from a population will converge on the true value
- Long-run means are very predictable
- Water/land sampling from inflatable globes


## Programming Loops

- R is a (moderately) general purpose programming language
- "Flow control" syntax

```{r}
#| echo: true

# for loops
n <- 100 # <1>
squares <- numeric(length = 100) # <2>

for (ii in 1:n){  # <3>
  squares[ii] <- ii^2  # <4>
}

squares
```
1. Set the number of iterations `n`.
2. Create an empty numeric vector to hold the `squares`.
3. Set up the for loop. The variable `ii` is created here. Iterate from 1 to n.
4. Assign the square of `ii` to the `ii`th element of the vector `squares`.


## Means of samples

```{r}
#| echo: true
#| fig-align: center

set.seed(423766)

x <- rnorm(n = 1000, mean = 10, sd = 4)
mean(x)

ggplot(tibble(x), aes(x)) +
  geom_histogram(bins = 30, fill = "coral") +
  labs(y = "Count")
```


## Resampling to estimate a mean

```{r}
#| echo: true

set.seed(12366)

sample_size <- 20

n_means <- 100
sample_means <- numeric(n_means)

for (ii in 1:n_means) {
  s <- sample(x, size = sample_size, replace = FALSE)  # <1>
  sample_means[ii] <- mean(s)
}
```
1. Randomly sample from x, being sure to not sample the same value twice (`replace = FALSE`).

. . .

```{r}
#| echo: true

sample_means[1:10]
```

What will the distribution of sample *means* look like? What will the range be?


## Sample means

```{r}
#| echo: true
#| fig-align: center
#| output-location: slide

ggplot(tibble(sample_means), aes(sample_means)) +
  geom_histogram(bins = 30, fill = "gold") +
  labs(x = "Sample Mean", y = "Count")
```


## Mean of means

```{r}
#| echo: true

mean(x)

mean(sample_means)
```

- What would change with larger sample sizes (> 20)?
- What would change with more means (> 100)?


# Questions {background-color="#f8c471"}

