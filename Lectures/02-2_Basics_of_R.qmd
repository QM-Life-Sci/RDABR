---
title: "Unit 2: R Basics"
subtitle: "Importing data"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    standalone: true
    slide-number: true
    show-slide-number: print
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false
```

## Everything in R is an "object"


## Assigning objects

Use `<-` for assign.

- Don't use `=` (even though you can).
- "Assign the object on the right to the object on the left."


## Kinds of data in R

- Character ("a", "Female", "The quick brown fox")
- Numeric (1.25, 1e6) or integer (1)
- Logical (`TRUE` or `FALSE`)
- Factor (categorical)


## Common R objects

1. Vectors
1. Matrices
1. `data.frame`s and `tibble`s
1. Functions


## Vectors

```{r}
#| echo: true

x <- c(112, 2.2, 7, 14.1)
x
x[2]
sort(x)
```


## Vectors

```{r}
#| echo: true

y1 <- 1:10
y2 <- seq(1, 10, length = 20)
y1[1:3]
y2[1:3]
```


## Vectors

```{r}
#| echo: true

x + 10
y1^2
min(x)
max(x)
```


## Vectors

```{r}
#| echo: true

sqrt(y2)
y2_mean <- mean(y2)
y2_sd <- sd(y2)
y2_mean
y2_sd
```


## Matrices

Rectangular object of *one data type*

- Indexed by [Rows, Columns] (think "RC Cola")
- Default is to fill by column (`byrow = TRUE` for row-wise)

```{r}
#| echo: true

M <- matrix(1:9, nrow = 3, ncol = 3)
M
M[2, 2]
```


## Matrices

```{r}
#| echo: true

M[1, ]
M[, 1]
```

![](https://i.imgur.com/1yKQBJZ.png){fig-align="center"}


## `data.frame()`: a basic unit of storage

Mixed data types per column

  - Numeric
  - Character
  - Factor (categorical)
  - Logical (`TRUE` and `FALSE`)


## Making data.frames

```{r}
#| echo: true

MM <- data.frame(x = 1:3,
                 y = c(10, 17, 21),
                 A = c("a", "b", "c"))
MM
```


## Extracting from data.frames

Either `$` or `[, ]` notation (with quoted column names).

```{r}
#| echo: true

MM$x
MM$A
MM[, "y"]
```


## Extracting from data.frames

```{r}
#| echo: true

MM[2, ]
MM[, 2]
```


## Tibbles 

Tibbles and `data.frame`s are essentially identical, but a `tibble` is more modern and works better with the data structure of the tidyverse. See `vignette("tibble")`.
    
- You can coerce a `data.frame` into a `tibble` with `as_tibble()`
- Tibbles never change the type of an input, never change the name of a variable, and never create row names.
- Tibbles only print 10 rows, and columns display their type (e.g., "chr", "int")


## Creating tibbles

```{r}
#| echo: true

MM <- tibble(x = 1:3,
             y = x ^ 2, # <1>
             A = c("a", "b", "c"))
MM
```

1. Creation of a column can refer back to previously created columns


## Creating tibbles with `tribble()`

- Row-wise creation
- Useful for small tibbles

```{r}
#| echo: true
tribble(
  ~x, ~y, ~A, # <1>
  1, 10, "a", # <2>
  2, 11, "b",
  3, 12, "c"
)
```

1. Supply column names with `~`
2. Each row is passed in sequence by column


## Functions

We will get to writing our own functions later, for now: `functionName()`, where parameters go inside `()`.

```{r}
#| echo: true

c(1)
sqrt(256)
```


## Functions

```{r}
#| echo: true

log(2.718)
exp(1)
```

Get help from the R command line with ?: `?sqrt` or `?log10`. Also try `help.search("mean")`, etc.


## References

::: {#refs}
:::

