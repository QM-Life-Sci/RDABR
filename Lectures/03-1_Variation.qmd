---
title: "Unit 3: Variation"
subtitle: "Data Visualization"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    standalone: true
    slide-number: true
    show-slide-number: print
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)

theme_set(theme_classic(base_size = 20))
```


# Introduction to Data Visualization {background-color="#40666e"}


## Why visualize data? {.scrollable}

```{r}
ds <- read_csv("../data/Datasaurus_data.csv",
               col_names = c("x1","x2"),
               show_col_types = FALSE)
knitr::kable(ds)
```


## Why visualize data? {.scrollable}

```{r}
ds |> 
  summarize(across(.cols = everything(),
                   .fns = list(Mean = mean, `Std. Dev.` = sd))) |> 
  mutate(across(.fns = round, digits = 2)) |> 
  knitr::kable()
```

. . .

What is the correlation?

```{r}
#| echo: true
with(ds, cor.test(x1, x2))
```


## Visualization reveals patterns

```{r}
ggplot(ds, aes(x = x1, y = x2)) +
  geom_point(color = "navy") +
  scale_x_continuous(limits = c(0, 100)) +
  scale_y_continuous(limits = c(0, 100)) +
  coord_fixed() +
  labs(title = expression(paste("Alberto Cairo's ", 
                                italic("Datasaurus"))))
```


## Visualization is an important part of analysis

- Plant growth data in two groups: control & treatment
- Collected over multiple years

```{r}
#| echo: false

set.seed(38479238)

DD <- tibble(weight = c(rnorm(50, 5, 1),
                        rnorm(40, 5.5, 1), 
                        rnorm(10,15,2)),
             group = rep(c("ctrl","treatment"), each = 50),
             year = rep(paste0("year", c(1,2,3,5,4)),each = 10, times = 2))
```

```{r}
#| echo: true

glimpse(DD)
```

. . .

```{r}
#| echo: true

DD |> 
  group_by(group) |>
  summarize(mean = mean(weight))
```


## Visualization is an important part of analysis

```{r}
#| echo: true

t.test(weight ~ group, data = DD)

```


## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight)) +
  geom_point(position = position_jitter(width = 0.2), size = 3,
             alpha = 1/2) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "steelblue") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "steelblue", linewidth = 1.5) 
```


## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight, color = year)) +
  geom_point(position = position_jitter(width = 0.2), size = 3,
             alpha = 1/2) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "black") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "black", linewidth = 1.5) 

```


## General rules of plot design

- Some definitely bad options, many possible good designs
- Think about communication
    - What point are you trying to make?
- Personal preference is important


## We will be plotting from here on...

Keep in mind throughout:

- Plot creation is an iterative process
    - Add layer by layer
- Remember "plotting problems" you have solved before
- Keep a code "gallery" of solutions
- Mastering ggplot takes time and experience


## Basics of ggplot

- [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html), loaded with `tidyverse`

- Anderson, E. 1935. The irises of the Gaspe Peninsula. *Bulletin of the American Iris Society* 59: 2â€“5.

```{r}
#| echo: true

str(iris)
```


## Basics of ggplot

```{r}
#| echo: true
#| eval: false

library(tidyverse)
ggplot(data = iris,
       aes(x = Petal.Length, y = Petal.Width)) + 
  geom_point() 
```

- `ggplot()` sets up the plot using `iris` data.
- **Aesthetic**: `aes()` sets `x` and `y` variables
- **Add**: `+ geom_point()` adds `(x, y)` points corresponding to `Petal.Length` and `Petal.Width`


## Logic of ggplot

- Building plots up by layers
    - Start simple
- Layers can be:
    - data
    - labels
    - colors
    - regression lines, etc.
- Change the theme (shading, colors, line widths, etc.)


## Logic of ggplot

```{r}
#| echo: true
#| eval: true
#| output-location: slide

library(tidyverse)
theme_set(theme_classic(base_size = 20)) # Preferred ggplot theme

ggplot(data = iris,
       aes(x = Petal.Length, y = Petal.Width)) +
  geom_point() 
```


## What would setting only 1 variable do?

```{r}
#| echo: true
#| warning: false
#| message: false
#| output-location: slide

ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram() 
```

- Adding `geom_histogram()`


## Building plots: Point color

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3)
```

- `color = Species` colors points by the _Species_ column (a factor)


## Building plots: Point shape

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 shape = Species)) + 
  geom_point(size = 3)
```

- `shape = Species` encodes _Species_ by the point shape


## Building plots: Point size

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 shape = Species)) + 
  geom_point(size = 5)

```

- Change point size


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(wesanderson)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_manual(values = wes_palette("Moonrise2"))
```

- Add an interesting color palette
- [Paletteer gallery](https://pmassicotte.github.io/paletteer_gallery/)


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(viridis)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_viridis(discrete = TRUE, option = "viridis")
```

- `library(viridis)` works for colorblind and grayscale friendly images.
- Use colorblind friendly colors


## Accessibility in plotting

:::: {.columns}

::: {.column width="50%"}
R Packages

- [colorBlindness](https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html)
- [colorblindr](https://github.com/clauswilke/colorblindr)
:::

::: {.column width="50%"}
Accessible palettes

- [RColorbrewer](https://colorbrewer2.org/)
- [Okabe-Ito](https://siegal.bio.nyu.edu/color-palette/)
:::

::::

![](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/colorblind_palette.jpg)



## Building plots: Axis labels

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_viridis(discrete = TRUE, option = "viridis") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises",
       caption = "Anderson (1935)")
```

- Add a title and better axis labels


## Building plots: Regression lines

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) + 
  geom_point(size = 3) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE,) +
  scale_color_viridis(discrete = TRUE, option = "viridis") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises",
       caption = "Anderson (1935)")
```

- `geom_line()` add a "smooth" line (but in this case linear [`lm`])


## Adding lines

What if you add a color aesthetic?

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3, alpha = 0.5) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE,
              linewidth = 2) +
  scale_color_viridis(discrete = TRUE, option = "viridis") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises",
       caption = "Anderson (1935)")
```


# Questions {background-color="#f8c471"}


# Variation {background-color="#40666e"}


## Variation in height for 6,465 individuals

```{r}
NHANES <- read_csv("../data/NHANES.csv", show_col_types = FALSE) |> 
  filter(Sex == "Male") |> 
  select(-Sex) |> 
  arrange(Height)

ggplot(NHANES, aes(x = Age, y = Height)) +
  geom_point(size = 1, show.legend = FALSE, alpha = 0.25,
             position = position_jitter(width = 0.25, seed = 3847293),
             color = "firebrick4") +
  scale_x_continuous(breaks = seq(0, 80, by = 5)) +
  labs(x = "Age (y)", y = "Height (cm)")
```


## Distribution of heights (age > 20)

```{r}
NHANES_20 <- NHANES |> filter(Age > 20)

ggplot(NHANES_20, aes(Height)) +
  geom_histogram(bins = 30, show.legend = FALSE,
                 fill = "firebrick4") +
  labs(x = "Height (cm)", y = "Count") +
  scale_x_continuous(breaks = seq(140, 200, by = 10))
```


## Distribution of heights (age = 40)

What do you think the distribution will look like?

. . .

```{r}
NHANES_40 <- NHANES |> filter(Age > 35.5 & Age < 40.5)

ggplot(NHANES_40, aes(Height)) +
  geom_histogram(bins = 30, show.legend = FALSE,
                 fill = "firebrick4") +
  labs(x = "Height (cm)", y = "Count") +
  scale_x_continuous(breaks = seq(140, 200, by = 10))
```


## Most biological variables are normally distributed

![](images/Heights.png){fig-align="center"}

:::{.center}
What are your ideas?
:::

:::{.right}
Schilling et al. [-@Schilling2002-mm]
:::


## We have seen this distribution before

```{r}
set.seed(234627)
x <- rbinom(n = 10000, size = 10, prob = 0.5)
x_tab <- table(x)

ggplot(data = tibble(Count = as.numeric(x_tab),
                     Successes = 0:10),
       aes(x = Successes, y = Count)) +
  geom_bar(stat = "identity", fill = "navy") +
  scale_x_continuous(breaks = 0:10) +
  labs(x = "n Successes in 10 Trials")
```


## Counts of "successes" in 10 coin flips

```{r}
x[1:100]
```

What do these counts represent?

. . .

Sums of 0 and 1 (in any order)

```{r}
#| echo: true

set.seed(459873)

(x <- rbinom(10, 1, 0.5))
sum(x)

(x <- rbinom(10, 1, 0.5))
sum(x)
```


## Genes are analogous to coin flips

![](images/Trihybrid_cross.jpg){fig-align="center"}

Each R, Y, or S contributes a 0 or 1


## Binomial Coefficient

$$\frac{Flips!}{Heads!~(Flips - Heads)!}$$

```{r}
#| echo: true

choose(n = 10, k = 0:10)
```

Empirical sampling (10000 samples standardized to 1024):

```{r}
#| echo: true
as.numeric(x_tab / (10000/1024))
```


## Games of chance

- Lotteries
- Card games
- Casino games

Probabilities all derived from the binomial coefficient:

$$\binom{n}{k} = \frac{n!}{k!~(n - k)!}$$

- $n$ is the number of trials
- $k$ is the number of "successes"


## Counting the "genes" for human height

Genome-wide Association Studies (GWAS)

- How are variations in alleles related to quantitative traits (e.g., height)?
- 2010: ~700 genes explain ~16% of the variation [@Lango_Allen2010-iu]
- 2018: 3,290 SNPs that collectively explain about 25% of the variation [@Yengo2018-gk]


## Simulating heights

What is the binomial equation for genes contributing to height?

. . .

$$\binom{Genes}{Active} = \frac{Active!}{Active!~(Genes - Active)!}$$

. . .

$$\binom{3290}{0 \dots 3290} = \frac{(0 \dots 3290)!}{(0 \dots 3290)!~((3290) - (0 \dots 3290))!}$$


## Simulating heights

How can we simulate the effects of many genes with `rbinom()`?

. . .

```{r}
#| echo: true

set.seed(34723487)

Genes <- 3290
Active_Genes <- 0:Genes

x <- rbinom(n = Genes, size = Active_Genes, prob = 0.5)
x[1:100]
```


## Distribution of gene effects

```{r}
#| echo: true
#| output-location: slide

ggplot(data = tibble(Active = Active_Genes[-1],
                     Effect = x),
       aes(x = Active, y = Effect)) +
  geom_bar(stat = "identity", fill = "skyblue")

```


# Questions {background-color="#f8c471"}


## References

::: {#refs}
:::

