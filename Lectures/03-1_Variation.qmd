---
title: "Unit 3: Variation"
subtitle: "Data Visualization"
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
format:
  clean-revealjs:
    self-contained: false
    chalkboard: true
    standalone: true
    slide-number: true
    show-slide-number: print
code-annotations: hover
bibliography: QMLS_Bibliography.bib
csl: evolution.csl
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)

theme_set(theme_classic(base_size = 20))
```


# Housekeeping {background-color="#40666e"}

## Problem set

- Turn in when you are ready
- "Official" due date is Thursday
- Do you want a week to complete problem sets?


## Week three check in

- Qualtrics survey that will be linked from Canvas (no assignment)
- Optional, but I hope you will complete it
- I will not see your individual responses -- only a summary (Dr. King)


## Questions

1. How have you found the pace of the class? Too slow, Just right, Too fast. Feel free to elaborate.
2. How you have found the level of difficulty? Too easy, Just right, Too complex. Feel free to elaborate.
3. What have you found most challenging?
4. What are you confident you understand?
5. Do you feel comfortable asking questions during class? Why or why not?
6. Do you feel supported in this class? If not, what would help?
7. What’s one thing I could do to improve your learning experience?
8. What’s something you’ve learned that has surprised you?


## Hellbender

- Connection problems
- Tidyverse won't load
- RCSS won't answer my emails

:::{.alert}
How do you feel about local installation on your laptop?
:::

- 1-2 GB free space
- Simplifies your workflow
    - All files local


# Introduction to Data Visualization {background-color="#40666e"}


## Why visualize data? {.scrollable}

```{r}
ds <- read_csv("https://raw.githubusercontent.com/QM-Life-Sci/RDABR/refs/heads/main/data/Datasaurus_data.csv",
               col_names = c("x1","x2"),
               show_col_types = FALSE)
knitr::kable(ds)
```


## Why visualize data? {.scrollable}

```{r}
ds |> 
  summarize(across(.cols = everything(),
                   .fns = list(Mean = mean, `Std. Dev.` = sd))) |> 
  mutate(across(.fns = round, digits = 2)) |> 
  knitr::kable()
```

. . .

What is the correlation?

```{r}
#| echo: true
with(ds, cor.test(x1, x2))
```


## Visualization reveals patterns

```{r}
ggplot(ds, aes(x = x1, y = x2)) +
  geom_point(color = "navy") +
  scale_x_continuous(limits = c(0, 100)) +
  scale_y_continuous(limits = c(0, 100)) +
  coord_fixed() +
  labs(caption = expression(paste("Alberto Cairo's ", 
                                  italic("Datasaurus"))))
```


## Visualization is an important part of analysis

- Plant growth data in two groups: control & treatment
- Collected over multiple years

```{r}
#| echo: false

set.seed(38479238)

DD <- tibble(weight = c(rnorm(50, 5, 1),
                        rnorm(40, 5.5, 1), 
                        rnorm(10, 15, 2)),
             group = rep(c("Control", "Treatment"), each = 50),
             year = rep(c(1, 2, 3, 5, 4),each = 10, times = 2)) |> 
  mutate(year = factor(year))
```

```{r}
#| echo: true

glimpse(DD)
```

. . .

```{r}
DD |> knitr::kable(digits = 2)
```


## Visualization is an important part of analysis

```{r}
#| echo: true
DD |> count(group)

DD |> 
  group_by(group) |>
  summarize(mean = mean(weight))
```

. . .

```{r}
#| echo: true

t.test(weight ~ group, data = DD)
```


## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight)) +
  geom_point(position = position_jitter(width = 0.2), size = 3,
             alpha = 0.75) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "steelblue") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "steelblue", linewidth = 1) +
  labs(x = "Group",
       y = "Weight (g)")
```


## Visualization is an important part of analysis

```{r}
#| echo: false

DD |>
  ggplot(aes(group, weight, color = year)) +
  geom_point(position = position_jitter(width = 0.2), size = 3,
             alpha = 0.75) +
  stat_summary(fun = mean, geom = "point", size = 5, color = "black") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.1,
               color = "black", linewidth = 1)  +
  scale_color_brewer(type = "qual", name = "Year", palette = "Set1") +
  labs(x = "Group",
       y = "Weight (g)")

```


## General rules of plot design

- Some definitely bad options, many possible good designs
- Think about communication
    - What point are you trying to make?
- Personal preference is important


## We will be plotting from here on...

Keep in mind throughout:

- Plot creation is an iterative process
    - Add layer by layer
- Remember "plotting problems" you have solved before
- Keep a code "gallery" of solutions
- Mastering ggplot takes time and experience


## Basics of ggplot

- [ggplot2](https://cran.r-project.org/web/packages/ggplot2/index.html), loaded with `tidyverse`

- Anderson, E. 1935. The irises of the Gaspe Peninsula. *Bulletin of the American Iris Society* 59: 2–5.

```{r}
#| echo: true

str(iris)
```


## Basics of ggplot

```{r}
#| echo: true
#| eval: false

library(tidyverse)
ggplot(data = iris,
       aes(x = Petal.Length, y = Petal.Width)) + 
  geom_point() 
```

- `ggplot()` sets up the plot using `iris` data.
- **Aesthetic**: `aes()` sets `x` and `y` variables
- **Add** (think "and"): `+ geom_point()` adds `(x, y)` points corresponding to `Petal.Length` and `Petal.Width`


## Logic of ggplot

- Building plots up by layers
    - Start simple
- Layers can be:
    - data (`geom_`etries)
    - labels
    - axis formatting
    - regression lines, etc.
    - theme elements (colors, line widths, etc.)


## Logic of ggplot

```{r}
#| echo: true
#| eval: false

library(tidyverse)
theme_set(theme_classic(base_size = 20)) # Preferred ggplot theme

ggplot(data = iris,
       aes(x = Petal.Length, y = Petal.Width)) +
  geom_point() 
```

- `data =` is optional and often omitted if the data is the first argument to the function


## What patterns do you observe?

```{r}
ggplot(data = iris,
       aes(x = Petal.Length, y = Petal.Width)) +
  geom_point() 
```


## What would setting only 1 variable do?

```{r}
#| echo: true
#| warning: false
#| message: false
#| output-location: slide

ggplot(iris, aes(x = Petal.Length)) + 
  geom_histogram() 
```

- Using `geom_histogram()` instead of `geom_point()`


## Building plots: Point color

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3)
```

- `color = Species` colors points by the `Species` column (a factor)


## Building plots: Point shape

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 shape = Species)) + 
  geom_point(size = 3)
```

- `shape = Species` encodes _Species_ by the point shape


## Building plots: Point size

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 shape = Species)) + 
  geom_point(size = 5)

```

- Change point size


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(wesanderson)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_manual(values = wes_palette("Moonrise2"))
```

- Add an interesting color palette
- [Paletteer gallery](https://pmassicotte.github.io/paletteer_gallery/){target="_blank"}
- [R colors](https://derekogle.com/NCGraphing/resources/colors){target="_blank"}


## Building plots: Custom color palette

```{r}
#| echo: true
#| output-location: slide

library(viridis)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_viridis(discrete = TRUE, option = "viridis")
```

- `library(viridis)` works for colorblind and grayscale friendly images.
- Use colorblind friendly colors


## Accessibility in plotting

:::: {.columns}

::: {.column width="50%"}
R Packages

- [colorBlindness](https://cran.r-project.org/web/packages/colorBlindness/vignettes/colorBlindness.html){target="_blank"}
- [colorblindr](https://github.com/clauswilke/colorblindr){target="_blank"}
:::

::: {.column width="50%"}
Accessible palettes

- [RColorbrewer](https://colorbrewer2.org/){target="_blank"}
- [Okabe-Ito](https://siegal.bio.nyu.edu/color-palette/){target="_blank"}
:::

::::

![](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/colorblind_palette.jpg)



## Building plots: Axis labels

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) + 
  scale_color_viridis(discrete = TRUE, option = "viridis") +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises",
       caption = "Anderson (1935)")
```

- Add a main title and better axis titles


## Building plots: Axis scales

```{r}
#| echo: true
#| output-location: slide

ggplot(iris, aes(x = Petal.Length,
                 y = Petal.Width,
                 color = Species)) + 
  geom_point(size = 3) +
  scale_color_viridis(discrete = TRUE, option = "viridis") +
  scale_x_continuous(breaks = seq(1, 7, by = 0.5)) +
  labs(x = "Petal Length (cm)",
       y = "Petal Width (cm)",
       title = "Irises",
       caption = "Anderson (1935)")
```

- `scale_x_continuous()` controls the axis ticks and tick labels


# Questions {background-color="#f8c471"}


# Variation {background-color="#40666e"}


## Variation in height for 6,465 individuals

```{r}
NHANES <- read_csv("https://raw.githubusercontent.com/QM-Life-Sci/RDABR/refs/heads/main/data/NHANES.csv",
                   show_col_types = FALSE) |> 
  filter(Sex == "Male") |> 
  select(-Sex) |> 
  arrange(Height)

ggplot(NHANES, aes(x = Age, y = Height)) +
  geom_point(size = 1, show.legend = FALSE, alpha = 0.25,
             position = position_jitter(width = 0.25, seed = 3847293),
             color = "firebrick4") +
  scale_x_continuous(breaks = seq(0, 80, by = 5)) +
  labs(x = "Age (y)", y = "Height (cm)")
```


## Distribution of heights (age > 20)

```{r}
NHANES_20 <- NHANES |> filter(Age > 20)

ggplot(NHANES_20, aes(Height)) +
  geom_histogram(bins = 30, show.legend = FALSE,
                 fill = "firebrick4") +
  labs(x = "Height (cm)", y = "Count") +
  scale_x_continuous(breaks = seq(140, 200, by = 10))
```


## Distribution of heights (age = 40)

What do you think the distribution will look like?

. . .

```{r}
NHANES_40 <- NHANES |> filter(Age > 35.5 & Age < 40.5)

ggplot(NHANES_40, aes(Height)) +
  geom_histogram(bins = 30, show.legend = FALSE,
                 fill = "firebrick4") +
  labs(x = "Height (cm)", y = "Count") +
  scale_x_continuous(breaks = seq(140, 200, by = 10))
```


## Most biological variables are normally distributed

![](images/Heights.png){fig-align="center"}

:::{.center}
What are your ideas why?
:::

:::{.right}
Schilling et al. [-@Schilling2002-mm]
:::


## We have seen this distribution before

```{r}
set.seed(234627)
x <- rbinom(n = 10000, size = 10, prob = 0.5)
x_tab <- table(x)

ggplot(data = tibble(Count = as.numeric(x_tab),
                     Successes = 0:10),
       aes(x = Successes, y = Count)) +
  geom_bar(stat = "identity", fill = "navy") +
  scale_x_continuous(breaks = 0:10) +
  labs(x = "n Successes in 10 Trials")
```


## Counts of "successes" in 10 coin flips

```{r}
x[1:100]
```

What do these counts represent?

. . .

Sums of 0 and 1 (in any order)

```{r}
#| echo: true

set.seed(459873)

(x <- rbinom(10, 1, 0.5))
sum(x)

(x <- rbinom(10, 1, 0.5))
sum(x)
```


## Genes are analogous to coin flips

![](images/Trihybrid_cross.jpg){fig-align="center"}

Each R, Y, or S contributes a 0 or 1


## Binomial Coefficient

Number of ways to get $k$ heads from $n$ flips:

$$\binom{Flips}{Heads} = \frac{Flips!}{Heads!~(Flips - Heads)!}$$

```{r}
#| echo: true

choose(n = 10, k = 5)

choose(n = 10, k = 0:10)
```

. . .

Empirical sampling (10000 samples standardized to 1024):

```{r}
#| echo: true
as.numeric(x_tab / (10000/1024)) |> round(digits = 2)
```


## Games of chance

- Lotteries
- Card games
- Casino games

Probabilities all derived from the binomial coefficient ($n$ choose $k$):

$$\binom{n}{k} = \frac{n!}{k!~(n - k)!}$$

- $n$ is the number of trials
- $k$ is the number of "successes"


## Counting the "genes" for human height

Genome-wide Association Studies (GWAS)

- How are variations in alleles related to quantitative traits (e.g., height)?
- 2010: ~700 genes explain ~16% of the variation [@Lango_Allen2010-iu]
- 2018: 3,290 single nucleotide polymorphisms (SNPs) that collectively explain about 25% of the variation [@Yengo2018-gk]


## Simulating heights

What is the binomial equation for SNPs contributing to height ("Taller" SNPs)?

. . .

$$\binom{SNPs}{Taller} = \frac{SNPs!}{Taller!~(SNPs - Taller)!}$$

. . .

$$\binom{3290}{0 \dots 3290} = \frac{(0 \dots 3290)!}{(0 \dots 3290)!~((3290) - (0 \dots 3290))!}$$

`3290!` is a very large number ($\sim 8 \times 10^{10145}$)


## Simulating heights

How can we simulate the effects of many SNPs with `rbinom()`?

. . .

```{r}
#| echo: true

# Set the number of SNPs
SNPs <- 3290

# Set the seed for reproducibility
set.seed(845934)
```

. . .

- 10,000 Individuals
- All individuals inherit 3290 SNPs
- Each SNP can be "Taller" (1) or "Average" (0)

```{r}
#| echo: true

x <- rbinom(n = 10000, size = SNPs, prob = 0.5)
```


## Counts of "Taller" SNPs 

```{r}
x[1:100]
```

:::{.alert}
What do these numbers represent?
:::


## Distribution of "Taller" SNPs 

```{r}
#| echo: true
#| output-location: slide

ggplot(data = tibble(x),
       aes(x)) +
  geom_histogram(bins = 30, fill = "skyblue") +
  labs(x = "Number of Taller SNPs",
       y = "Count")
```


## Assumptions and limitations of the model

What are your ideas?

. . .

- Each SNP must have a very (very) small effect
- All SNPs are independent
- Each SNP has the same magnitude of effect (+1)
- All SNPs are at 50% frequency (`prob = 0.5`)
- Others


## Exact probabilities

```{r}
exact_prob <- tibble(x = 0:SNPs,
                     y = dbinom(x, SNPs, prob = 0.5))

ggplot(exact_prob,
       aes(x, y)) +
  geom_bar(stat = "identity", color = "navy") +
  scale_x_continuous(breaks = seq(0, 3290, by = 500)) +
  labs(x = "Number of Taller SNPs",
       y = "Probability")
```


## Exact probabilities

```{r}
exact_prob <- tibble(x = 0:SNPs,
                     y = dbinom(x, SNPs, prob = 0.5))

ggplot(exact_prob,
       aes(x, y)) +
  geom_bar(stat = "identity", color = "navy") +
  scale_x_continuous(breaks = seq(0, 3290, by = 500)) +
  labs(x = "Number of Taller SNPs",
       y = "Probability")
```


## Exact probabilities

```{r}
exact_prob <- tibble(x = 1550:1750,
                     y = dbinom(x, SNPs, prob = 0.5))

ggplot(exact_prob,
       aes(x, y)) +
  geom_bar(stat = "identity", color = "navy") +
  scale_x_continuous(breaks = seq(1550, 1750, by = 50)) +
  labs(x = "Number of Taller SNPs",
       y = "Probability")
```


# Questions {background-color="#f8c471"}


## References

::: {#refs}
:::

